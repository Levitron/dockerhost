- hosts: dockerhost
  vars:
    # Default theme
    oh_my_zsh_theme: agnoster

    # Default plugins
    oh_my_zsh_plugins:
      - git
      - colorize

    # User configuration
    # Important: oh-my-zsh is installed per user so you need to specify the users to install it for.
    users:
      - username: root
        oh_my_zsh:
          theme: agnoster
          plugins:
            - git
            - colorize

    epel_repo_url: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"
    epel_repo_gpg_key_url: "https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-{{ ansible_distribution_major_version }}"
    epel_repofile_path: "/etc/yum.repos.d/epel.repo"

    docker_repo_url: "https://download.docker.com/linux/centos/docker-ce.repo"
    docker_repofile_path: "/etc/yum.repos.d/docker-ce.repo"

    #bareos_repo_url: "http://download.bareos.org/bareos/release/19.2/CentOS_8/bareos.repo"
    #bareos_repofile_path: "/etc/yum.repos.d/bareos.repo"


    node_exporter_web_listen_address: "192.168.178.125:9100"

  roles:
    - role: levitron.zsh
    - role: gantsign.oh-my-zsh
      users:
        - username: root
          oh_my_zsh:
            plugins:
              - git
              - zsh-autosuggestions
              - zsh-completions
              - zsh-syntax-highlighting

    - role: cloudalchemy.node-exporter

  tasks:
    - name: 1.Check if EPEL repo is already configured.
      stat: path={{ epel_repofile_path }}
      register: epel_repofile_result

    - name: 2.Install EPEL repo.
      dnf:
        name: "{{ epel_repo_url }}"
        state: present
      register: result
      when: not epel_repofile_result.stat.exists

    - name: 3.Import EPEL GPG key.
      rpm_key:
        key: "{{ epel_repo_gpg_key_url }}"
        state: present
      when: not epel_repofile_result.stat.exists

    - name: 1.Check if docker repo is already configured.
      stat: path={{ docker_repofile_path }}
      register: docker_repofile_result

    - name: 2.Install docker repo.
      get_url:
        url: "{{ docker_repo_url }}"
        dest: "{{ docker_repofile_path }}"
      register: result
      when: not docker_repofile_result.stat.exists

#    - name: Check if bareos repo is already configured.
#      stat: path={{ bareos_repofile_path }}
#      register: bareos_repofile_result
#
#    - name: Install bareos repo.
#      get_url:
#        url: "{{ bareos_repo_url }}"
#        dest: "{{ bareos_repofile_path }}"
#      register: result
#      when: not bareos_repofile_result.stat.exists
#
# dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.rep

#    - name: 3.Import docker GPG key.
#      rpm_key:
#        key: "{{ docker_repo_gpg_key_url }}"
#        state: present
#      when: not docker_repofile_result.stat.exists



    - name: ensure basic packages
      dnf:
        name:
          - htop
          - iptraf
          - iotop
          - iftop
          - dnf-utils
          - device-mapper-persistent-data
          - lvm2
#          - bareos
 #         - bareos-database-postgresql
        state: latest

    - name: ensure deinstalled DHCP and DNS
      dnf:
        name:
          - dhcp-server
          - bind
          - dnsmasq
        state: absent

# skip as long as latest docker is broken
#    - name: ensure docker
#      dnf:
#        name:
#          - docker-ce
#        state: present

    - name: Download docker-compose
      get_url:
        url: https://github.com/docker/compose/releases/download/1.23.2/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '0700'

    - name: Make sure docker is running
      systemd:
        state: started
        enabled: yes
        name: docker

    - name: Make sure firewalld is NOT running
      systemd:
        state: stopped
        enabled: no
        name: firewalld

#    - name: Adding user root to docker group
#      user:
#        name: root
#        groups: docker
#        append: yes

    - name: copy dockerhost folder
      copy:
        src: dockerhost
        dest: /root
        owner: root
        group: root
        mode: '0644'
        force: yes

    - name: checkout promethues config
      become: yes
      git:
        repo: 'git@github.com:Levitron/prometheus.git'
        dest: /etc/prometheus/
        force: yes

    - name: Change file ownership, group and permissions
      become: yes
      file:
       path: /etc/prometheus/
       recurse: yes
       owner: nobody
       group: nobody
       mode: '0775'

    - name: ensure influx data dir
      become: yes
      file:
        path: /var/influxdb/data
        state: directory

    - name: ensure chronograf data dir
      become: yes
      file:
        path: /var/chronograf/data
        state: directory

#    - name: Create proxy network
#      shell: docker network create nginx-proxy

    - name: docker-compose stop prometheus
      shell: docker-compose stop prometheus
      args:
        chdir: /root/dockerhost/

    - name: proxy - docker-compose up
      shell: docker-compose up -d
      args:
        chdir: /root/dockerhost/proxy

    - name: docker-compose up
      shell: docker-compose up -d
      args:
        chdir: /root/dockerhost/


#    - name: download portainer-compose
#      git:
#        repo: https://github.com/portainer/portainer-compose.git
#        dest: portainer-compose

#    - name: ensure portainer is running
#      docker_compose:
#        project_src: portainer-compose
